import IDictionary from "../../types/IDictionary";

const InstructionTitles: IDictionary<string> = {
    aaa: "ASCII Adjust \\reg{AL} After Addition",
    aad: "ASCII Adjust \\reg{AX} Before Division",
    aam: "ASCII Adjust \\reg{AX} After Multiplication",
    aas: "ASCII Adjust \\reg{AL} After Subtraction",
    adc: "Add With Carry",
    adcx: "Unsigned Integer Addition of Two Operands with Carry Flag",
    add: "Add",
    addList: "Add (Vector)",
    addpd: "Add Packed Double-Precision Floating-Point Values",
    addps: "Add Packed Single-Precision Floating-Point Values",
    addsd: "Add Scalar Double-Precision Floating-Point Values",
    addss: "Add Scalar Single-Precision Floating-Point Values",
    addsubList: "Add/Subtract (Vector)",
    addsubpd: "Add/Subtract Packed Double-Precision Floating-Point Values",
    addsubps: "Add/Subtract Packed Single-Precision Floating-Point Values",
    adox: "Unsigned Integer Addition of Two Operands with Overflow Flag",
    aesdecList: "Perform AES Decryption",
    aesdec: "Perform One Round of AES Decryption",
    aesdeclast: "Perform Last Round of AES Decryption",
    aesencList: "Perform AES Encryption",
    aesenc: "Perform One Round of AES Encryption",
    aesenclast: "Perform Last Round of AES Encryption",
    aesimc: "Perform the AES \"Inverse Mix Columns\" Transformation",
    aeskeygenassist: "AES Round Key Generation Assist",
    and: "Logical AND",
    andList: "Logical AND (Vector)",
    andpd: "Logical AND Packed Double-Precision Floating-Point Values",
    andps: "Logical AND Packed Single-Precision Floating-Point Values",
    andn: "Logical AND NOT",
    andnList: "Logical AND NOT (Vector)",
    andnpd: "Logical AND NOT Packed Double-Precision Floating-Point Values",
    andnps: "Logical AND NOT Packed Single-Precision Floating-Point Values",
    arpl: "Adjust \\c{RPL} Field of Segment Selector",

    bextr: "Bit Extract Field",
};

export default InstructionTitles;
