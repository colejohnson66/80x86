import IDictionary from "../../types/IDictionary";

const InstructionTitles: IDictionary<string> = {
    aaa: "ASCII Adjust \\reg{AL} After Addition",
    aad: "ASCII Adjust \\reg{AX} Before Division",
    aam: "ASCII Adjust \\reg{AX} After Multiplication",
    aas: "ASCII Adjust \\reg{AL} After Subtraction",
    adc: "Add With Carry",
    adcx: "Unsigned Integer Addition of Two Operands with Carry Flag",
    add: "Add",
    addList: "Add (Vector)",
    addpd: "Add Packed Double-Precision Floating-Point Values",
    addps: "Add Packed Single-Precision Floating-Point Values",
    addsd: "Add Scalar Double-Precision Floating-Point Values",
    addss: "Add Scalar Single-Precision Floating-Point Values",
    addsubList: "Add/Subtract (Vector)",
    addsubpd: "Add/Subtract Packed Double-Precision Floating-Point Values",
    addsubps: "Add/Subtract Packed Single-Precision Floating-Point Values",
    adox: "Unsigned Integer Addition of Two Operands with Overflow Flag",
    aesdecList: "Perform AES Decryption",
    aesdec: "Perform One Round of AES Decryption",
    aesdec128kl: "Perform Ten Rounds of AES Decryption With Key Locker",
    aesdec256kl: "Perform 14 Rounds of AES Decryption With Key Locker",
    aesdeclast: "Perform Last Round of AES Decryption",
    aesdecwide128kl: "Perform Ten Rounds of AES Decryption With Key Locker on Eight Blocks",
    aesdecwide256kl: "Perform 14 Rounds of AES Decryption With Key Locker on Eight Blocks",
    aesencList: "Perform AES Encryption",
    aesenc: "Perform One Round of AES Encryption",
    aesenc128kl: "Perform Ten Rounds of AES Encryption With Key Locker",
    aesenc256kl: "Perform 14 Rounds of AES Encryption With Key Locker",
    aesenclast: "Perform Last Round of AES Encryption",
    aesencwide128kl: "Perform Ten Rounds of AES Encryption With Key Locker on Eight Blocks",
    aesencwide256kl: "Perform 14 Rounds of AES Encryption With Key Locker on Eight Blocks",
    aesimc: "Perform the AES \"Inverse Mix Columns\" Transformation",
    aeskeygenassist: "AES Round Key Generation Assist",
    and: "Logical AND",
    andList: "Logical AND (Vector)",
    andpd: "Logical AND Packed Double-Precision Floating-Point Values",
    andps: "Logical AND Packed Single-Precision Floating-Point Values",
    andn: "Logical AND NOT",
    andnList: "Logical AND NOT (Vector)",
    andnpd: "Logical AND NOT Packed Double-Precision Floating-Point Values",
    andnps: "Logical AND NOT Packed Single-Precision Floating-Point Values",
    arpl: "Adjust \\c{RPL} Field of Segment Selector",

    bextr: "Bit Extract Field",
    blendList: "Blend (Vector)",
    blendpd: "Blend Packed Double-Precision Floating-Point Values",
    blendps: "Blend Packed Single-Precision Floating-Point Values",
    blendvList: "Variable Blend (Vector)",
    blendvpd: "Variable Blend Packed Double-Precision Floating-Point Values",
    blendvps: "Variable Blend Packed Single-Precision Floating-Point Values",
    blsi: "Extract Lowest Set Bit",
    blsmsk: "Get Mask Up to Lowest Set Bit",
    blsr: "Clear Lowest Set Bit",
    bndcl: "Check Lower Bound",
    bndcuList: "Check Upper Bound",
    bndcn: "Check Upper Bound",
    bndcu: "Check Upper Bound (Inverted)",
    bndldx: "Load Extended Bounds Using Address Translation",
    bndmk: "Make Bounds",
    bndmov: "Move Bounds",
    bndstx: "Store Extended Bounds Using Address Translation",
    bound: "Check Array Index Against Bounds",
    bsf: "Bit Scan Forward",
    bsr: "Bit Scan Reverse",
    bswap: "Byte Swap",
    bt: "Bit Test",
    btc: "Bit Test and Complement",
    btr: "Bit Test and Reset",
    bts: "Bit Test and Set",
    bzhi: "Zero High Bits From Index",

    call: "Call Procedure",
    cbw: "Convert Byte to Word",
    cwde: "Convert Word to Doubleword",
    cdqe: "Convert Doubleword to Quadword",
    clac: "Clear Alignment Check Flag",
    clc: "Clear Carry Flag",
    cld: "Clear Direction Flag",
    cldemote: "Demote Cache Line",
    clflush: "Flush Cache Line",
    clflushopt: "Flush Cache Line (Optimized)",
    cli: "Clear Interrupt Flag",
    clrssbsy: "Clear Busy Flag in a Supervisor Shadow Stack Token",
    clts: "Clear Task-Switched Flag in \\reg{CR0}",
    clwb: "Write Back Cache Line",
    cmc: "Complement Carry Flag",
    cmovcc: "Conditional Move",
    cmp: "Compare",
    cmpList: "Compare (Vector)",
    cmppd: "Compare Packed Double-Precision Floating-Point Values",
    cmpps: "Compare Packed Single-Precision Floating-Point Values",
    cmpsd: "Compare Scalar Double-Precision Floating-Point Values",
    cmpss: "Compare Scalar Single-Precision Floating-Point Values",
    cmps: "Compare Strings",
    cmpxchg: "Compare and Exchange",
    cmpxchg8b: "Compare and Exchange 8 Bytes",
    cmpxchg16b: "Compare and Exchange 16 Bytes",
    comiList: "Compare Ordered",
    comisd: "Compare Scalar Ordered Double-Precision Floating-Point Values and Set \\reg{EFLAGS}",
    comiss: "Compare Scalar Ordered Single-Precision Floating-Point Values and Set \\reg{EFLAGS}",
    cpuid: "CPU Identification",
    crc32: "Accumulate CRC32 Value",
    cvtdqList: "Convert Packed Doubleword Integers (Vector)",
    cvtdq2pd: "Convert Packed Doubleword Integers to Packed Double-Precision Floating-Point Values",
    cvtdq2ps: "Convert Packed Doubleword Integers to Packed Single-Precision Floating-Point Values",
    cvtpdList: "Convert Packed Double-Precision Floating-Point Values (Vector)",
    cvtpd2dq: "Convert Packed Double-Precision Floating-Point Values to Packed Doubleword Integers",
    cvtpd2di: "Convert Packed Double-Precision Floating-Point Values to Packed Doubleword Integers (MMX)",
    cvtpd2ps: "Convert Packed Double-Precision Floating-Point Values to Packed Single-Precision Floating-Point Values",
    cvtpiList: "Convert Packed Doubleword Integers (Vector/MMX)",
    cvtpi2pd: "Convert Packed Doubleword Integers to Packed Double-Precision Floating-Point Values (MMX)",
    cvtpi2ps: "Convert Packed Doubleword Integers to Packed Single-Precision Floating-Point Values (MMX)",
    cvtpsList: "Convert Packed Single-Precision Floating-Point Values (Vector)",
    cvtps2dq: "Convert Packed Single-Precision Floating-Point Values to Packed Doubleword Integers",
    cvtps2pd: "Convert Packed Single-Precision Floating-Point Values to Packed Double-Precision Floating-Point Values",
    cvtps2pi: "Convert Packed Single-Precision Floating-Point Values Packed Doubleword Integers (MMX)",
    cvtsdList: "Convert Scalar Double-Precision Floating-Point Value (Vector)",
    cvtsd2si: "Convert Scalar Double-Precision Floating-Point Value to Doubleword Integer",
    cvtsd2ss: "Convert Scalar Double-Precision Floating-Point Value to Scalar Single-Precision Floating-Point Value",
    cvtsiList: "Convert Doubleword Integer (Vector)",
    cvtsi2sd: "Convert Doubleword Integer to Scalar Double-Precision Floating-Point Value",
    cvtsi2ss: "Convert Doubleword Integer to Scalar Single-Precision Floating-Point Value",
    cvtssList: "Convert Scalar Single-Precision Floating-Point Value (Vector)",
    cvtss2sd: "Convert Scalar Single-Precision Floating-Point Value to Scalar Double-Precision Floating-Point Value",
    cvtss2si: "Convert Scalar Single-Precision Floating-Point Value to Doubleword Integer",
    cvttpdList: "Convert with Truncation Packed Double-Precision Floating-Point Values (Vector)",
    cvttpd2dq: "Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Doubleword Integers",
    cvttpd2pi: "Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Doubleword Integers (MMX)",
    cvttpsList: "Convert with Truncation Packed Single-Precision Floating-Point Values (Vector)",
    cvttps2dq: "Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Doubleword Integers",
    cvttps2pi: "Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Doubleword Integers (MMX)",
    //cvttsdList: "Convert with Truncation Scalar Double-Precision Floating-Point Value (Vector)",
    cvttsd2si: "Convert with Truncation Scalar Double-Precision Floating-Point Value to Doubleword Integer",
    // cvttssList: "Convert with Truncation Scalar Single-Precision Floating-Point Value (Vector)",
    cvttss2si: "Convert with Truncation Scalar Single-Precision Floating-Point Value to Doubleword Integer",
    cwd: "Convert Word to Doubleword Through DX",
    cdq: "Convert Doubleword to Quadword Through EDX",
    cqo: "Convert Quadword to Octoword Through RDX",

    daa: "Decimal Adjust \\reg{AL} After Addition",
    das: "Decimal Adjust \\reg{AL} After Subtraction",
    dec: "Decrement by One",
    div: "Unsigned Divide",
    divList: "Divide (Vector)",
    divpd: "Divide Packed Double-Precision Floating-Point Values",
    divps: "Divide Packed Single-Precision Floating-Point Values",
    divsd: "Divide Scalar Double-Precision Floating-Point Value",
    divss: "Divide Scalar Single-Precision Floating-Point Value",
    dpList: "Dot Product (Vector)",
    dppd: "Dot Product of Packed Double-Precision Floating Point Values",
    dpps: "Dot Product of Packed Single-Precision Floating Point Values",

    emms: "Empty MMX Technology State",
    encodekey128: "Encode 128 bit Key with Key Locker",
    encodekey256: "Encode 256 bit Key with Key Locker",
    endbr32: "Terminate an Indirect Branch in 32 bit Mode",
    endbr64: "Terminate an Indirect Branch in 64 bit Mode",
    enter: "Make Stack Frame for Procedure Parameters",
    extractps: "Extract Packed Floating-Point Values",
};

export default InstructionTitles;
