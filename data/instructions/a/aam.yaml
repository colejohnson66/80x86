%YAML 1.2
---
title: ASCII Adjust \reg{AX} After Multiplication
validity: 1632,64
opcode:
  - opcode: D4 0A
    mnemonic: AAM
    encoding: ZO
    validity:
      1632: valid
      64: invalid
    description: ASCII adjust \reg{AX} after multiply.
  - opcode: D4 \i{ib}
    mnemonic: AAM \i{imm8}
    encoding: I
    validity:
      1632: valid
      64: invalid
    description: ASCII adjust \reg{AX} after multiply to number base \i{imm8}.
encoding:
  operands: 1
  encodings:
    ZO:
      - None (implicitly 10)
    I:
      - imm8[r]
bitEncoding:
  list:
    - form: implicit 10
      bits:
        - \bits{1101 0100}
        - \bits{0000 1010}
    - form: immediate
      bits:
        - \bits{1101 0100}
        - immediate
description: >-
  The \c{AAM} instruction converts the result of a multiplication of two BCD digits to a valid 2-digit BCD number.

  This instruction will not be useful unless it immediately follows an \instr{MUL} instruction.

  Traditionally, this instruction is called "ASCII Adjust After Multiplication".
  This would lead one to believe that it works on ASCII digits (\c{030h} (\c{0}) through \c{039h} (\c{9})), however this would be incorrect.
  This instruction \i{actually} operates on BCD digits (\c{00h} (\c{0}) through \c{09h} (\c{9})).

  Due to a quirk of history, this instruction encodes the base of the result in the instruction (the second byte).
  As such, it is possible to have this instruction work on other bases through an immediate 8 bit operand.
  Such methods are not guaranteed to be supported by your assembler, and in such situations, one must encode the instruction directly.

  This instruction is not valid in 64 bit mode, and if encountered, the processor will raise a \c{#UD} exception.
operation: >-
  pub fn aam(imm8: u8) {
    AH = AL / imm8;
    AL = AL % imm8;
  }
flags:
  CF: Undefined.
  PF: Set based on the resulting value in \reg{AL}.
  AF: Undefined.
  ZF: Set based on the resulting value in \reg{AL}.
  SF: Set based on the resulting value in \reg{AL}.
  OF: Undefined.
exceptions:
  protected:
    "#DE": If an immediate value of 0 is used.
    "#UD": If the \instr{LOCK} prefix is used.
  real: Same exceptions as protected mode.
  virtual: Same exceptions as protected mode.
  compatibility: Same exceptions as protected mode.
  long:
    "#UD": If in 64 bit mode.
