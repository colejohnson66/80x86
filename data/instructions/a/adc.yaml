%YAML 1.2
---
title: Add With Carry
opcode:
  - opcode: 14 \i{ib}
    mnemonic: ADC AL, \i{imm8}
    encoding: AI
    validity:
      16: valid
      32: valid
      64: valid
    description: Add with carry \i{imm8} to \reg{AL}.
  - opcode: 15 \i{iw}
    mnemonic: ADC AX, \i{imm16}
    encoding: AI
    validity:
      16: valid
      32: valid
      64: valid
    description: Add with carry \i{imm16} to \reg{AX}.
  - opcode: 15 \i{id}
    mnemonic: ADC EAX, \i{imm32}
    encoding: AI
    validity:
      16: valid
      32: valid
      64: valid
    description: Add with carry \i{imm32} to \reg{EAX}.
  - opcode: REX.W 15 \i{id}
    mnemonic: ADC RAX, \i{imm32}
    encoding: AI
    validity:
      16: n/e
      32: n/e
      64: valid
    description: Add with carry \i{imm32} (sign extended to 64 bits) to \reg{RAX}
  - opcode: 80 /2 \i{ib}
    mnemonic: ADC \i{r/m8}, \i{imm8}
    encoding: MI
    validity:
      16: valid
      32: valid
      64: valid
    description: Add with carry \i{imm8} to \i{r/m8}.
  - opcode: REX 80 /2 \i{ib}
    mnemonic: ADC \i{r/m8*}, \i{imm8}
    encoding: MI
    validity:
      16: n/e
      32: n/e
      64: valid
    description: Add with carry \i{imm8} to \i{r/m8}.
  - opcode: 81 /2 \i{iw}
    mnemonic: ADC \i{r/m16}, \i{imm16}
    encoding: MI
    validity:
      16: valid
      32: valid
      64: valid
    description: Add with carry \i{imm16} to \i{r/m16}.
  - opcode: 81 /2 \i{id}
    mnemonic: ADC \i{r/m32}, \i{imm32}
    encoding: MI
    validity:
      16: valid
      32: valid
      64: valid
    description: Add with carry \i{imm32} to \i{r/m32}.
  - opcode: REX.W 81 /2 \i{id}
    mnemonic: ADC \i{r/m64}, \i{imm32}
    encoding: MI
    validity:
      16: n/e
      32: n/e
      64: valid
    description: Add with carry \i{imm32} (sign extended to 64 bits) too \i{r/m64}.
  - opcode: 82 /2 \i{ib}
    mnemonic: ADC \i{r/m8}, \i{r8}
    encoding: MI
    validity:
      16: valid
      32: valid
      64: invalid
    description: >-
      Undocumented alias for \c{80 /2 ib}.
      Add with carry \i{r8} (sign extended to 8 bits) to \i{r/m8}.
  - opcode: 83 /2 \i{ib}
    mnemonic: ADC \i{r/m16}, \i{imm8}
    encoding: MI
    validity:
      16: valid
      32: valid
      64: valid
    description: Add with carry \i{imm8} (sign extended to 16 bits) to \i{r/m16}.
  - opcode: 83 /2 \i{ib}
    mnemonic: ADC \i{r/m32}, \i{imm8}
    encoding: MI
    validity:
      16: valid
      32: valid
      64: valid
    description: Add with carry \i{imm8} (sign extended to 32 bits) to \i{r/m32}.
  - opcode: REX.W 83 /2 \i{ib}
    mnemonic: ADC \i{r/m64}, \i{imm8}
    encoding: MI
    validity:
      16: n/e
      32: n/e
      64: valid
    description: Add with carry \i{imm8} (sign extended to 64 bits) to \i{r/m64}.
  - opcode: 10 /r
    mnemonic: ADC \i{r/m8}, \i{r8}
    encoding: MR
    validity:
      16: valid
      32: valid
      64: valid
    description: Add with carry \i{r8} to \i{r/m8}.
  - opcode: REX 10 /r
    mnemonic: ADC \i{r/m8*}, \i{r8*}
    encoding: MR
    validity:
      16: n/e
      32: n/e
      64: valid
    description: Add with carry \i{r8} to \i{r/m8}.
  - opcode: 11 /r
    mnemonic: ADC \i{r/m16}, \i{r16}
    encoding: MR
    validity:
      16: valid
      32: valid
      64: valid
    description: Add with carry \i{r16} to \i{r/m16}.
  - opcode: 11 /r
    mnemonic: ADC \i{r/m32}, \i{r32}
    encoding: MR
    validity:
      16: valid
      32: valid
      64: valid
    description: Add with carry \i{r32} to \i{r/m32}.
  - opcode: REX.W 11 /r
    mnemonic: ADC \i{r/m64}, \i{r64}
    encoding: MR
    validity:
      16: n/e
      32: n/e
      64: valid
    description: Add with carry \i{r64} to \i{r/m64}.
  - opcode: 12 /r
    mnemonic: ADC \i{r8}, \i{r/m8}
    encoding: RM
    validity:
      16: valid
      32: valid
      64: valid
    description: Add with carry \i{r/m8} to \i{r8}.
  - opcode: REX 12 /r
    mnemonic: ADC \i{r8*}, \i{r/m8*}
    encoding: RM
    validity:
      16: n/e
      32: n/e
      64: valid
    description: Add with carry \i{r/m8} to \i{r8}.
  - opcode: 13 /r
    mnemonic: ADC \i{r16}, \i{r/m16}
    encoding: RM
    validity:
      16: valid
      32: valid
      64: valid
    description: Add with carry \i{r/m16} to \i{r16}.
  - opcode: 13 /r
    mnemonic: ADC \i{r32}, \i{r/m32}
    encoding: RM
    validity:
      16: valid
      32: valid
      64: valid
    description: Add with carry \i{r/m32} to \i{r32}.
  - opcode: REX.W 13 /r
    mnemonic: ADC \i{r64}, \i{r/m64}
    encoding: RM
    validity:
      16: n/e
      32: n/e
      64: valid
    description: Add with carry \i{r/m64} to \i{r64}.
encoding:
  operands: 2
  encodings:
    AI:
      - AL/AX/EAX/RAX[rw]
      - imm8/16/32[r]
    MI:
      - ModRM.r/m[rw]
      - imm8/16/32[r]
    MR:
      - ModRM.r/m[rw]
      - ModRM.reg[r]
    RM:
      - ModRM.reg[rw]
      - ModRM.r/m[r]
bitEncoding:
  list:
    - form: reg3(1) into reg3(2)
      bits:
        - \bits{0001 000w}
        - \bits{11 reg3(1) reg3(2)}
    - form: reg3 into memory
      bits:
        - \bits{0001 000w}
        - \bits{mod reg3 r/m}
    - form: reg3(2) into reg3(1)
      bits:
        - \bits{0001 001w}
        - \bits{11 reg3(1) reg3(2)}
    - form: memory into reg3
      bits:
        - \bits{0001 001w}
        - \bits{mod reg3 r/m}
    - form: immediate into reg3
      bits:
        - \bits{1000 00sw}
        - \bits{11 010 reg3}
        - immediate
    - form: immediate into \reg{AL}, \reg{AX}, or \reg{EAX}
      bits:
        - \bits{0001 010w}
        - immediate
    - form: immediate into memory
      bits:
        - \bits{1000 00sw}
        - \bits{mod 010 r/m}
        - immediate
description: >-
  The \c{ADC} instruction adds the destination operand, the source operand, and the \reg{CF} flag and stores the result in the destination operand.

  This instruction is designed for use in multibyte additions such as in arbitrary precision arithmetic.
  It does not differentiate between signed and unsigned operands, but will set the \reg{OF} and \reg{CF} to indicate a carry for signed and unsigned results (respectively).

  This instruction can be used with the \instr{LOCK} prefix to allow atomic execution.

  In 64 bit mode, the default operand size is 32 bits, but \c{REX.W} will change it to 64 bits.
operation: >-
  // `src` is sign extended to the width of `dest`

  public void ADC_8(ref byte dest, byte src)
  {
    CF:dest = dest + src + CF;
  }

  public void ADC_16(ref ushort dest, ushort src)
  {
    CF:dest = dest + src + CF;
  }

  public void ADC_32(ref uint dest, uint src)
  {
    CF:dest = dest + src + CF;
  }

  public void ADC_64(ref ulong dest, ulong src)
  {
    CF:dest = dest + src + CF;
  }
flags:
  CF: Set according to the result.
  PF: Set according to the result.
  AF: Set according to the result.
  ZF: Set according to the result.
  SF: Set according to the result.
  OF: Set according to the result.
intrinsicsC: |-
  uint8_t _addcarry_u8(uint8_t c_in, uint8_t src1, uint8_t src2, uint8_t *sum_out)
  uint8_t _addcarry_u16(uint8_t c_in, uint16_t src1, uint16_t src2, uint16_t *sum_out)
  uint8_t _addcarry_u32(uint8_t c_in, uint32_t src1, uint32_t src2, uint32_t *sum_out)
  uint8_t _addcarry_u64(uint8_t c_in, uint64_t src1, uint64_t src2, uint64_t *sum_out)
exceptions:
  protected:
    "#GP(0)":
      - If the destination is located in a non-writable segment.
      - If a memory operand effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
      - If the \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} register is used to access memory and it contains a \c{NULL} segment selector.
    "#SS(0)": If a memory operand effective address is outside the \reg{SS} segment limit.
    "#PF(fault-code)": If a page fault occurs.
    "#AC(0)": If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
    "#UD": If the \instr{LOCK} prefix is used but the destination is not a memory operand.
  real:
    "#GP": If a memory operand effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
    "#SS": If a memory operand effective address is outside the \reg{SS} segment limit.
    "#UD": If the \instr{LOCK} prefix is used but the destination is not a memory operand.
  virtual:
    "#GP(0)": If a memory operand effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
    "#SS(0)": If a memory operand effective address is outside the \reg{SS} segment limit.
    "#PF(fault-code)": If a page fault occurs.
    "#AC(0)": If alignment checking is enabled and an unaligned memory reference is made.
    "#UD": If the \instr{LOCK} prefix is used but the destination is not a memory operand.
  compatibility: Same exceptions as in protected mode.
  long:
    "#SS(0)": If a memory address referencing the \reg{SS} segment is in a non-canonical form.
    "#GP(0)": If a memory operand address is in a non-canonical form.
    "#PF(fault-code)": If a page fault occurs.
    "#AC(0)": If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
    "#UD": If the \instr{LOCK} prefix is used but the destination is not a memory operand.
