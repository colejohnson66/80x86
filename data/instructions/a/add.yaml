%YAML 1.2
---
title: Add
validity: 1632,64
opcode:
  - opcode: 04 \i{ib}
    mnemonic: ADD AL, \i{imm8}
    encoding: AI
    validity:
      1632: valid
      64: valid
    description: Adds \i{imm8} to \reg{AL}.
  - opcode: 05 \i{iw}
    mnemonic: ADD AX, \i{imm16}
    encoding: AI
    validity:
      1632: valid
      64: valid
    description: Adds \i{imm16} to \reg{AX}.
  - opcode: 05 \i{id}
    mnemonic: ADD EAX, \i{imm32}
    encoding: AI
    validity:
      1632: valid
      64: valid
    description: Adds \i{imm32} to \reg{EAX}.
  - opcode: REX.W 05 \i{id}
    mnemonic: ADD RAX, \i{imm32}
    encoding: AI
    validity:
      1632: n/e
      64: valid
    description: Adds \i{imm32} (sign extended to 64 bits) to \reg{RAX}.
  - opcode: 80 /0 \i{ib}
    mnemonic: ADD \i{r/m8}, \i{imm8}
    encoding: MI
    validity:
      1632: valid
      64: valid
    description: Adds \i{imm8} into \i{r/m8}.
  - opcode: REX 80 /0 \i{ib}
    mnemonic: ADD \i{r/m8*}, \i{imm8}
    encoding: MI
    validity:
      1632: n/e
      64: valid
    description: Adds \i{imm8} into \i{r/m8}.
  - opcode: 81 /0 \i{iw}
    mnemonic: ADD \i{r/m16}, \i{imm16}
    encoding: MI
    validity:
      1632: valid
      64: valid
    description: Adds \i{imm16} into \i{r/m16}.
  - opcode: 81 /0 \i{id}
    mnemonic: ADD \i{r/m32}, \i{imm32}
    encoding: MI
    validity:
      1632: valid
      64: valid
    description: Adds \i{imm32} into \i{r/m32}.
  - opcode: REX.W 81 /0 \i{id}
    mnemonic: ADD \i{r/m64}, \i{imm32}
    encoding: MI
    validity:
      1632: n/e
      64: valid
    description: Adds \i{imm32} into \i{r/m64}.
  - opcode: 82 /0 \i{ib}
    mnemonic: ADD \i{r/m8}, \i{imm8}
    encoding: MI
    validity:
      1632: valid
      64: invalid
    description: >-
      Undocumented alias for \c{80 /0 ib}.
      Adds \i{imm8} (sign extended to 8 bits) into \i{r/m8}.
  - opcode: 83 /0 \i{ib}
    mnemonic: ADD \i{r/m16}, \i{imm8}
    encoding: MI
    validity:
      1632: valid
      64: valid
    description: Adds \i{imm8} (sign extended to 16 bits) into \i{r/m16}.
  - opcode: 83 /0 \i{ib}
    mnemonic: ADD \i{r/m32}, \i{imm8}
    encoding: MI
    validity:
      1632: valid
      64: valid
    description: Adds \i{imm8} (sign extended to 32 bits) into \i{r/m32}.
  - opcode: REX.W 83 /0 \i{ib}
    mnemonic: ADD \i{r/m64}, \i{imm8}
    encoding: MI
    validity:
      1632: n/e
      64: valid
    description: Adds \i{imm8} (sign extended to 64 bits) into \i{r/m64}.
  - opcode: 00 /r
    mnemonic: ADD \i{r/m8}, \i{r8}
    encoding: MR
    validity:
      1632: valid
      64: valid
    description: Adds \i{r8} into \i{r/m8}.
  - opcode: REX 00 /r
    mnemonic: ADD \i{r/m8*}, \i{r8}
    encoding: MR
    validity:
      1632: n/e
      64: valid
    description: Adds \i{r8} into \i{r/m8}.
  - opcode: 01 /r
    mnemonic: ADD \i{r/m16}, \i{r16}
    encoding: MR
    validity:
      1632: valid
      64: valid
    description: Adds \i{r16} into \i{r/m16}.
  - opcode: 01 /r
    mnemonic: ADD \i{r/m32}, \i{r32}
    encoding: MR
    validity:
      1632: valid
      64: valid
    description: Adds \i{r32} into \i{r/m32}.
  - opcode: REX.W 01 /r
    mnemonic: ADD \i{r/m64}, \i{r64}
    encoding: MR
    validity:
      1632: n/e
      64: valid
    description: Adds \i{r64} into \i{r/m64}.
  - opcode: 02 /r
    mnemonic: ADD \i{r8}, \i{r/m8}
    encoding: RM
    validity:
      1632: valid
      64: valid
    description: Adds \i{r/m8} into \i{r/8}.
  - opcode: REX 02 /r
    mnemonic: ADD \i{r8}, \i{r/m8*}
    encoding: RM
    validity:
      1632: n/e
      64: valid
    description: Adds \i{r/m8} into \i{r8}.
  - opcode: 03 /r
    mnemonic: ADD \i{r16}, \i{r/m16}
    encoding: RM
    validity:
      1632: valid
      64: valid
    description: Adds \i{r/m16} into \i{r16}.
  - opcode: 03 /r
    mnemonic: ADD \i{r32}, \i{r/m32}
    encoding: RM
    validity:
      1632: valid
      64: valid
    description: Adds \i{r/m32} into \i{r32}.
  - opcode: REX.W 03 /r
    mnemonic: ADD \i{r64}, \i{r/m64}
    encoding: RM
    validity:
      1632: n/e
      64: valid
    description: Adds \i{r/m64} into \i{r64}.
encoding:
  operands: 2
  encodings:
    AI:
      - AL/AX/EAX/RAX[rw]
      - imm8/16/32[r]
    MI:
      - ModRM.r/m[rw]
      - imm8/16/32[r]
    MR:
      - ModRM.r/m[rw]
      - ModRM.reg[r]
    RM:
      - ModRM.reg[rw]
      - ModRM.r/m[r]
bitEncoding:
  list:
    - form: reg3(1) into reg3(2)
      bits:
        - \bits{0000 000w}
        - \bits{11 reg3(1) reg3(2)}
    - form: reg3 into memory
      bits:
        - \bits{0000 000w}
        - \bits{mod reg3 r/m}
    - form: reg3(2) into reg3(1)
      bits:
        - \bits{0000 001w}
        - \bits{11 reg3(1) reg3(2)}
    - form: memory into reg3
      bits:
        - \bits{0000 001w}
        - \bits{mod reg3 r/m}
    - form: immediate into reg3
      bits:
        - \bits{1000 00sw}
        - \bits{11 000 reg3}
        - immediate
    - form: immediate into \reg{AL}, \reg{AX}, or \reg{EAX}
      bits:
        - \bits{0000 010w}
        - immediate
    - form: immediate into memory
      bits:
        - \bits{1000 00sw}
        - \bits{mod 000 r/m}
        - immediate
description: >-
  The \c{ADD} instruction adds the destination operand with the source operand and stores the result in the destination operand.

  This instruction can be used with the \instr{LOCK} prefix to allow atomic execution.

  In 64 bit mode, the default operand size is 32 bits, but \c{REX.W} will change it to 64 bits.
operation: |-
  pub fn add<T>(dest: &mut T, src: T) {
    *dest = *dest + src;
  }
flags:
  CF: Set according to the result.
  PF: Set according to the result.
  AF: Set according to the result.
  ZF: Set according to the result.
  SF: Set according to the result.
  OF: Set according to the result.
exceptions:
  protected:
    "#GP(0)":
      - If the destination is located in a non-writable segment.
      - If a memory operand effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
      - If the \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} register is used to access memory and it contains a \c{NULL} segment selector.
    "#SS(0)": If a memory operand effective address is outside the \reg{SS} segment limit.
    "#PF(fault-code)": If a page fault occurs.
    "#AC(0)": If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
    "#UD": If the \instr{LOCK} prefix is used but the destination is not a memory operand.
  real:
    "#GP": If a memory operand effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
    "#SS": If a memory operand effective address is outside the \reg{SS} segment limit.
    "#UD": If the \instr{LOCK} prefix is used but the destination is not a memory operand.
  virtual:
    "#GP(0)": If a memory operand effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
    "#SS(0)": If a memory operand effective address is outside the \reg{SS} segment limit.
    "#PF(fault-code)": If a page fault occurs.
    "#AC(0)": If alignment checking is enabled and an unaligned memory reference is made.
    "#UD": If the \instr{LOCK} prefix is used but the destination is not a memory operand.
  compatibility: Same exceptions as in protected mode.
  long:
    "#SS(0)": If a memory address referencing the \reg{SS} segment is in a non-canonical form.
    "#GP(0)": If a memory operand address is in a non-canonical form.
    "#PF(fault-code)": If a page fault occurs.
    "#AC(0)": If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
    "#UD": If the \instr{LOCK} prefix is used but the destination is not a memory operand.
