%YAML 1.2
---
title: Perform the AES "Inverse Mix Columns" Transformation
opcode:
  - opcode: 66 0F 38 DB /r
    mnemonic: AESIMC \i{xmm1}, \i{xmm2/m128}
    encoding: RM
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: AES
    description:
      Performs the "inverse mix columns" transformation on a 128 bit round key from \i{xmm2/m128}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.128.66.0F38.WIG DB /r
    mnemonic: VAESIMC \i{xmm1}, \i{xmm2/m128}
    encoding: RM
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: [AES, AVX]
    description:
      Performs the "inverse mix columns" transformation on a 128 bit round key from \i{xmm2/m128}.
      Stores the result in \i{xmm1}.
encoding:
  operands: 2
  encodings:
    RM:
      - ModRM.reg[w]
      - ModRM.r/m[r]
bitEncoding:
  list:
    - form: xmmreg3(2) into xmmreg3(1)
      bits:
        - \bits{66}
        - \bits{0F}
        - \bits{38}
        - \bits{DB}
        - \bits{11 xmmreg3(1) xmmreg3(2)}
    - form: memory into xmmreg3
      bits:
        - \bits{66}
        - \bits{0F}
        - \bits{38}
        - \bits{DB}
        - \bits{mod xmmreg3 r/m}
description: >-
  The \c{(V)AESIMC} instruction performs the "inverse mix columns" (\c{InvMixColumns}) transformation on a round key stored in the source operand.
  The result is stored in in the destination operand.

  This instruction should be applied to the expanded AES round keys (excepting the first and last) to prepare them for decryption using the "Equivalent Inverse Cipher" (see FIPS 197).

  The VEX form of this instruction reserves \c{VEX.vvvv} (i.e. it must be set to \c{0b1111}).
  Failure to do so will result in a \c{#UD} exception.
operation: |-
  public void AESIMC(SimdU128 dest, SimdU128 src)
  {
    dest[0] = AesInvMixColumns(src[0]);
    // dest[1..Simd.MAX] (unmodified)
  }

  public void VAESIMC_Vex128(SimdU128 dest, SimdU128 src)
  {
    dest[0] = AesInvMixColumns(src[0]);
    dest[1..Simd.MAX] = 0;
  }
intrinsics: |-
  __m128i _mm_aesimc(__m128i key)
exceptions:
  floating: None
  other: See Exceptions Type 4.
  otherAdditional:
    "#UD": If \c{VEX.vvvv} is not \c{0b1111}.
