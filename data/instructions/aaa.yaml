%YAML 1.2
---
# Intel's manual (v73) doesn't say "AL"
title: "ASCII Adjust AL After Addition"
validity: "1632,64"
opcode:
  - opcode: "37"
    mnemonic: "AAA"
    encoding: "ZO"
    validity:
      1632: "valid"
      64: "invalid"
    description: "ASCII adjust AL after addition."
encoding:
  - encoding: "ZO"
    op1: "N/A"
    op2: "N/A"
    op3: "N/A"
    op4: "N/A"
description: >-
  Adjusts the sum of two unpacked BCD values to create an unpacked BCD result.
  The AL register is the implied source and destination operand for this instruction.
  The AAA instruction is only useful when it follows an ADD instruction that adds (binary addition) two unpacked BCD values and stores a byte result in the AL register.
  The AAA instruction then adjusts the contents of the AL register to contain the correct 1-digit unpacked BCD result.

  If the instruction produces a decimal carry, the AH register increments by 1, and the CF and AF flags are set.
  If there was no decimal carry, the CF and AF flags are cleared and the AH register is unchanged.
  In either case, bits 4 through 7 of the AL register are set to 0.

  This instruction executes as described in compatibility mode and legacy mode.
  It is not valid in 64-bit mode.
operation: >-
  fn aaa() {
    if (MODE == 64) {
      #UD;
    } else {
      if (((AL & 0xF) > 9) || AF) {
        AX = AX + 0x106;
        AF = 1;
        CF = 1;
      } else {
        AF = 0;
        CF = 0;
      }
      AL = AL & 0xF;
    }
  }
flags: >-
  The AF and CF flags are set to 1 if the adjustment results in a decimal carry; otherwise they are set to 0.
  The OF, SF, ZF, and PF flags are undefined.
exceptions:
  protected:
    "#UD": "If the LOCK prefix is used."
  real: "Same exceptions as protected mode."
  virtual: "Same exceptions as protected mode."
  compatibility: "Same exceptions as protected mode."
  long:
    "#UD": "If in 64-bit mode."
