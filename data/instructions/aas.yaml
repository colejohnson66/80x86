%YAML 1.2
---
title: ASCII Adjust \reg{AL} After Subtraction
validity: 1632,64
opcode:
  - opcode: 3F
    mnemonic: AAS
    encoding: ZO
    validity:
      1632: valid
      64: invalid
    description: ASCII adjust \reg{AL} after subtraction.
encoding:
  operands: 1
  encodings:
    ZO:
      - None
description: >-
  The \c{AAS} instruction converts the result of a subtraction of two BCD digits to a valid 2-digit BCD number.

  This instruction will not be useful unless it immediately follows an \instr{ADD} instruction using the \reg{AL} register and a single digit operand (either register or immediate).

  Traditionally, this instruction is ASCII Adjust After Subtraction.
  This would lead one to believe that it works on ASCII digits (\c{030h} (\c{0}) through \c{039h} (\c{9})), however this would be incorrect.
  This instruction \i{actually} operates on BCD digits (\c{00h} (\c{0}) through \c{09h} (\c{9})).

  This instruction is not valid in 64-bit mode, and if encountered, the processor will raise a \c{#UD} exception.
  In 16- or 32-bit mode, this instruction will only modify the \reg{AF} and \reg{CF} flags.
  The other arithmetic flags are undefined and undocumented.
operation: >-
  fn aas() {
    if (MODE == 64) {
      #UD;
    } else {
      if ((AL & 0xF) > 9) || AF) {
        AX = AX - 6;
        AH = AH - 1;
        AF = 1;
        CF = 1;
      } else {
        AF = 0;
        CF = 0;
      }
      AL = AL & 0xF;
    }
  }
flags: >-
  The \reg{AF} and \reg{CF} flags are set to 1 if the adjustment results in a decimal borrow; otherwise they are set to 0.
  The \reg{OF}, \reg{SF}, \reg{ZF}, and \reg{PF} flags are undefined.
exceptions:
  protected:
    "#UD": If the \instr{LOCK} prefix is used.
  real: Same exceptions as protected mode.
  virtual: Same exceptions as protected mode.
  compatibility: Same exceptions as protected mode.
  long:
    "#UD": If in 64-bit mode.
