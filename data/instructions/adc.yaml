%YAML 1.2
---
title: Add With Carry
validity: 1632,64
opcode:
  - opcode: 14 \i{ib}
    mnemonic: ADC AL, \i{imm8}
    encoding: I
    validity:
      1632: valid
      64: valid
    description: Add with carry \abbr{imm8} to \reg{AL}.
  - opcode: 15 \i{iw}
    mnemonic: ADC AX, \i{imm16}
    encoding: I
    validity:
      1632: valid
      64: valid
    description: Add with carry \abbr{imm16} to \reg{AX}.
  - opcode: 15 \i{id}
    mnemonic: ADC EAX, \i{imm32}
    encoding: I
    validity:
      1632: valid
      64: valid
    description: Add with carry \abbr{imm32} to \reg{EAX}.
  - opcode: REX.W 15 \i{id}
    mnemonic: ADC RAX, \i{imm32}
    encoding: I
    validity:
      1632: n/e
      64: valid
    description: Add with carry \abbr{imm32} (sign extended to 64 bits) to \reg{RAX}
  - opcode: 80 /2 \i{ib}
    mnemonic: ADC \i{r/m8}, \i{imm8}
    encoding: MI
    validity:
      1632: valid
      64: valid
    description: Add with carry \abbr{imm8} to \abbr{r/m8}.
  - opcode: REX 80 /2 \i{ib}
    mnemonic: ADC \i{r/m8*}, \i{imm8}
    encoding: MI
    validity:
      1632: n/e
      64: valid
    description: Add with carry \abbr{imm8} to \abbr{r/m8}.
  - opcode: 81 /2 \i{iw}
    mnemonic: ADC \i{r/m16}, \i{imm16}
    encoding: MI
    validity:
      1632: valid
      64: valid
    description: Add with carry \abbr{imm16} to \abbr{r/m16}.
  - opcode: 81 /2 \i{id}
    mnemonic: ADC \i{r/m32}, \i{imm32}
    encoding: MI
    validity:
      1632: valid
      64: valid
    description: Add with carry \abbr{imm32} to \abbr{r/m32}.
  - opcode: REX.W 81 /2 \i{id}
    mnemonic: ADC \i{r/m64}, \i{imm32}
    encoding: MI
    validity:
      1632: n/e
      64: valid
    description: Add with carry \abbr{imm32} (sign extended to 64 bits) too \abbr{r/m64}.
  - opcode: 83 /2 \i{ib}
    mnemonic: ADC \i{r/m16}, \i{imm8}
    encoding: MI
    validity:
      1632: valid
      64: valid
    description: Add with carry \abbr{imm8} (sign extended to 16 bits) to \abbr{r/m16}.
  - opcode: 83 /2 \i{ib}
    mnemonic: ADC \i{r/m32}, \i{imm8}
    encoding: MI
    validity:
      1632: valid
      64: valid
    description: Add with carry \abbr{imm8} (sign extended to 32 bits) to \abbr{r/m32}.
  - opcode: REX.W 83 /2 \i{ib}
    mnemonic: ADC \i{r/m64}, \i{imm8}
    encoding: MI
    validity:
      1632: n/e
      64: valid
    description: Add with carry \abbr{imm8} (sign extended to 64 bits) to \abbr{r/m64}.
  - opcode: 10 /r
    mnemonic: ADC \i{r/m8}, \i{r8}
    encoding: MR
    validity:
      1632: valid
      64: valid
    description: Add with carry \abbr{r8} to \abbr{r/m8}.
  - opcode: REX 10 /r
    mnemonic: ADC \i{r/m8*}, \i{r8*}
    encoding: MR
    validity:
      1632: n/e
      64: valid
    description: Add with carry \abbr{r8} to \abbr{r/m8}.
  - opcode: 11 /r
    mnemonic: ADC \i{r/m16}, \i{r16}
    encoding: MR
    validity:
      1632: valid
      64: valid
    description: Add with carry \abbr{r16} to \abbr{r/m16}.
  - opcode: 11 /r
    mnemonic: ADC \i{r/m32}, \i{r32}
    encoding: MR
    validity:
      1632: valid
      64: valid
    description: Add with carry \abbr{r32} to \abbr{r/m32}.
  - opcode: REX.W 11 /r
    mnemonic: ADC \i{r/m64}, \i{r64}
    encoding: MR
    validity:
      1632: n/e
      64: valid
    description: Add with carry \abbr{r64} to \abbr{r/m64}.
  - opcode: 12 /r
    mnemonic: ADC \i{r8}, \i{r/m8}
    encoding: RM
    validity:
      1632: valid
      64: valid
    description: Add with carry \abbr{r/m8} to \abbr{r8}.
  - opcode: REX 12 /r
    mnemonic: ADC \i{r8*}, \i{r/m8*}
    encoding: RM
    validity:
      1632: n/e
      64: valid
    description: Add with carry \abbr{r/m8} to \abbr{r8}.
  - opcode: 13 /r
    mnemonic: ADC \i{r16}, \i{r/m16}
    encoding: RM
    validity:
      1632: valid
      64: valid
    description: Add with carry \abbr{r/m16} to \abbr{r16}.
  - opcode: 13 /r
    mnemonic: ADC \i{r32}, \i{r/m32}
    encoding: RM
    validity:
      1632: valid
      64: valid
    description: Add with carry \abbr{r/m32} to \abbr{r32}.
  - opcode: REX.W 13 /r
    mnemonic: ADC \i{r64}, \i{r/m64}
    encoding: RM
    validity:
      1632: n/e
      64: valid
    description: Add with carry \abbr{r/m64} to \abbr{r64}.
encoding:
  operands: 2
  encodings:
    I:
      - AL/AX/EAX/RAX
      - imm8/16/32
    MI:
      - ModRM:r/m[rw]
      - imm8/16/32
    MR:
      - ModRM:r/m[rw]
      - ModRM:reg[r]
    RM:
      - ModRM:reg[rw]
      - ModRM:r/m[r]
description: >-
  The \c{ADC} instruction adds the destination operand, the source operand, and the \c{CF} flag and stores the result in the destination operand.

  This instruction is designed for use in multibyte additions such as in arbitrary precision arithmetic.
  It does not differentiate between signed and unsigned operands, but will set the \c{OF} and \c{CF} to indicate a carry for signed and unsigned results (respectively).

  This instruction can be used with the \instr{LOCK} prefix to allow atomic execution.

  In 64-bit mode, the default operand size is 32 bits, but \c{REX.W} will change it to 64 bits.
operation: >-
  fn adc<D, S>(dest: &mut D, src: S) {
    *dest = *dest + src + CF;
  }
flags: >-
  The \reg{OF}, \reg{SF}, \reg{ZF}, \reg{AF}, \reg{CF}, and \reg{PF} flags are set according to the result.
intrinsicsC: |-
  uint8_t _addcarry_u8(uint8_t c_in, uint8_t src1, uint8_t src2, uint8_t *sum_out)
  uint8_t _addcarry_u16(uint8_t c_in, uint16_t src1, uint16_t src2, uint16_t *sum_out)
  uint8_t _addcarry_u32(uint8_t c_in, uint32_t src1, uint32_t src2, uint32_t *sum_out)
  uint8_t _addcarry_u64(uint8_t c_in, uint64_t src1, uint64_t src2, uint64_t *sum_out)
intrinsicsRust: |-
  addcarry::u8(c: bool, src1: u8, src2: u8, sum: &mut [u8])
  addcarry::u16(c: bool, src1: u16, src2: u16, sum: &mut [u16])
  addcarry::u32(c: bool, src1: u32, src2: u32, sum: &mut [u32])
  addcarry::u64(c: bool, src1: u64, src2: u64, sum: &mut [u64])
exceptions:
  protected:
    "#GP(0)":
      - If the destination is located in a non-writable segment.
      - If a memory operand effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
      - If the \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} register is used to access memory and it contains a \c{NULL} segment selector.
    "#SS(0)": If a memory operand effective address is outside the \reg{SS} segment limit.
    "#PF(fault-code)": If a page fault occurs.
    "#AC(0)": If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
    "#UD": If the \instr{LOCK} prefix is used but the destination is not a memory operand.
  real:
    "#GP": If a memory operand effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
    "#SS": If a memory operand effective address is outside the \reg{SS} segment limit.
    "#UD": If the \instr{LOCK} prefix is used but the destination is not a memory operand.
  virtual:
    "#GP(0)": If a memory operand effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
    "#SS(0)": If a memory operand effective address is outside the \reg{SS} segment limit.
    "#PF(fault-code)": If a page fault occurs.
    "#AC(0)": If alignment checking is enabled and an unaligned memory reference is made.
    "#UD": If the \instr{LOCK} prefix is used but the destination is not a memory operand.
  compatibility: Same exceptions as in protected mode.
  long:
    "#SS(0)": If a memory address referencing the \reg{SS} segment is in a non-canonical form.
    "#GP(0)": If a memory operand address is in a non-canonical form.
    "#PF(fault-code)": If a page fault occurs.
    "#AC(0)": If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
    "#UD": If the \instr{LOCK} prefix is used but the destination is not a memory operand.
