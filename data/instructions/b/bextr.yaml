%YAML 1.2
---
title: Bit Extract Field
validity: 32,64
opcode:
  - opcode: VEX.LZ.0F38.W0 F7 /r
    mnemonic: BEXTR \i{r32a}, \i{r/m32}, \i{r32b}
    encoding: RMV
    validity:
      32: valid
      64: valid
    cpuid: BMI1
    description: >-
      Contiguous bitwise extraction from \i{r/m32} using \i{r32b} as a control.
      Stores the result in \i{r32a}.
  - opcode: VEX.LZ.0F38.W1 F7 /r
    mnemonic: BEXTR \i{r64a}, \i{r/m64}, \i{r64b}
    encoding: RMV
    validity:
      32: invalid
      64: valid
    cpuid: BMI1
    description: >-
      Contiguous bitwise extraction from \i{r/m64} using \i{r64b} as a control.
      Stores the result in \i{r64a}.
encoding:
  operands: 3
  encodings:
    RMV:
      - ModRM.reg[w]
      - ModRM.r/m[r]
      - VEX.vvvv[r]
description: >-
  The \c{BEXTR} instruction extracts contiguous bits from the first source operand using using index and length values provided in the second source operand.
  The result is stored in the destination operand.

  The control register contains 16 bits: the lower eight are the starting index into the slice, and the upper eight is the amount of bits to extract.
  In other words, the destination register will be filled least significant to most significant by copying from the source, beginning at the starting position (where 0 indicates the least significant bit).
  The length field determines how many bits are extracted.
  This operation can be thought of as shifting the source right by "start" bits and then zeroing all bits with positions greater than or equal to "length".

  The operand size (\c{W} bit) is always 32 bits if not in Long Mode.
  In other words, in Protected and Compatibility Mode, \c{VEX.W1} is treated as \c{VEX.W0}.

  The length field (\c{L} bit) \i{must} be zero (signifying 128 bit vectors).
  Attempts to execute with \c{VEX.L1} (256 bit vectors) will cause a \c{#UD} exception.
operation: |-
  pub fn bextr<T>(dest: &mut T, src1: T, src2: T) {
    let start = src2[7..=0];
    let len = src2[15..=0];
    let end = start + len - 1;
    dest = src1[end..=start];
  }
flags: >-
  The \reg{ZF} flag is updated based on the result.
  \reg{AF}, \reg{SF}, and \reg{PF} are undefined.
  All other flags are cleared.
intrinsicsC: |-
  uint32_t _bextr_u32(uint32_t src, uint32_t start, uint32_t len)
  uint64_t _bextr_u64(uint64_t src, uint32_t start, uint32_t len)
exceptions:
  floating: None
  other: See Exceptions Type 13.
  otherAdditional:
    "#UD": If \c{VEX.L} is not \c{0}.
changes:
  version: 73
  date: 2020-11
  list:
    - >-
      The "Exceptions" section lists the \c{#UD} as occurring when \c{VEX.W = 1}.
      Assuming they forgot to say "when in 32 bit mode", it still wouldn't make sense as their description lists \c{VEX.W = 1} to be treated as \c{VEX.W = 0} in 32 bit mode.
      The most likely typo seems to be that it should be \c{VEX.L}.
    - >-
      The \c{BEXTR r64a, r/m64, r64b} form is incorrectly documented as being "not encodable" in 32 bit mode.
      This is misleading as it \i{is} encodable, but is defined to be treated as the 32 bit form.
