%YAML 1.2
---
title: Blend Packed Double-Precision Floating-Point Values
validity: 32,64
opcode:
  - opcode: 66 0F 3A 0C /r \i{ib}
    mnemonic: BLENDPS \i{xmm1}, \i{xmm2/m128}, \i{imm8}
    encoding: LEGACY
    validity:
      32: valid
      64: valid
    cpuid: SSE4_1
    description: >-
      Selects packed single-precision floating-point values from \i{xmm1} and \i{xmm2/m128} from a mask specified in \i{imm8}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.128.66.0F3A.WIG 0C /r \i{ib}
    mnemonic: VBLENDPS \i{xmm1}, \i{xmm2}, \i{xmm3/m128}, \i{imm8}
    encoding: VEX
    validity:
      32: valid
      64: valid
    cpuid: AVX
    description: >-
      Selects packed single-precision floating-point values from \i{xmm2} and \i{xmm3/m128} from a mask specified in \i{imm8}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.256.66.0F3A.WIG 0C /r \i{ib}
    mnemonic: VBLENDPS \i{ymm1}, \i{ymm2}, \i{ymm3/m256}, \i{imm8}
    encoding: VEX
    validity:
      32: valid
      64: valid
    cpuid: AVX
    description: >-
      Selects packed single-precision floating-point values from \i{ymm2} and \i{ymm3/m256} from a mask specified in \i{imm8}.
      Stores the result in \i{ymm1}.
encoding:
  operands: 4
  encodings:
    LEGACY:
      - ModRM:reg[rw]
      - ModRM:r/m[r]
      - imm8[3:0]
      - ""
    VEX:
      - ModRM:reg[w]
      - VEX.vvvv[r]
      - ModRM:r/m[r]
      - imm8
bitEncoding:
  list:
    - form: xmmreg3(2) into xmmreg3(1)
      bits:
        - \bits{66}
        - \bits{0F}
        - \bits{3A}
        - \bits{0C}
        - \bits{11 xmmreg3(1) xmmreg3(2)}
        - \bits{imm8}
    - form: memory into xmmreg3
      bits:
        - \bits{66}
        - \bits{0F}
        - \bits{3A}
        - \bits{0D}
        - \bits{mod xmmreg3 r/m}
        - \bits{imm8}
description: >-
  The \c{(V)BLENDPS} instruction conditionally moves single-precision floating-point values from the second source operand into the first source operand.
  The result is stored in the destination operand.

  This instruction, despite being named as if it operates on floating-point numbers, will work on 32 bit integers as well.

  All versions \i{except} the legacy SSE version zero the unused upper SIMD register bits.
operation: |-
  pub fn blendps(dest: &mut Simd<f32>, src: Simd<f32>, mask: u8) {
    // If `mask[n]` is 0, `dest` will be copied into itself (i.e. nothing will happen)
    if mask[0] {
      dest[31..=0] = src[31..=0]
    }
    if mask[1] {
      dest[63..=32] = src[63..=32];
    }
    if mask[2] {
      dest[95..=64] = src[95..=64];
    }
    if mask[3] {
      dest[127..=96] = src[127..=96];
    }
    // dest[Simd::max()..=128] (unmodified)
  }

  fn vblendps_vex(dest: &mut Simd<f32>, src1: Simd<f32>, src2: Simd<f32>, mask: u8, kl: u32) {
    for n in 0..kl {
      let vi = n * 32;
      let vi_next = vi + 31;

      if mask[n] {
        dest[vi_next..=vi] = src2[vi_next..=vi];
      } else {
        dest[vi_next..=vi] = src1[vi_next..=vi];
      }
    }

    let end = kl * 32;
    dest[Simd::max()..=end] = 0;
  }

  pub fn vblendps_vex128(dest: &mut Simd<f32>, src1: Simd<f32>, src2: Simd<f32>, mask: u8) {
    vblendps_vex(dest, src1, src2, mask, 4);
  }
  pub fn vblendps_vex256(dest: &mut Simd<f32>, src1: Simd<f32>, src2: Simd<f32>, mask: u8) {
    vblendps_vex(dest, src1, src2, mask, 8);
  }
intrinsicsC: |-
  __m128 _mm_blend_ps(__m128 v1, __m128 v2, const uint32_t mask)
  __m256 _mm256_blend_ps(__m256 a, __m256 b, const uint32_t mask)
exceptions:
  floating: None
  other: See Exceptions Type 4.
