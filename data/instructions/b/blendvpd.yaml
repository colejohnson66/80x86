%YAML 1.2
---
title: Variable Blend Packed Double-Precision Floating-Point Values
opcode:
  - opcode: 66 0F 38 15 /r
    mnemonic: BLENDVPD \i{xmm1}, \i{xmm2/m128}, <XMM0>
    encoding: LEGACY
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: SSE4_1
    description: >-
      Selects packed double-precision floating-point values from \i{xmm1} and \i{xmm2/m128} from a mask specified in \reg{XMM0}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.128.66.0F3A.W0 4B /r ib
    mnemonic: VBLENDVPD \i{xmm1}, \i{xmm2}, \i{xmm3/m128}, \i{xmm4}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: AVX
    description: >-
      Selects packed double-precision floating-point values from \i{xmm2} and \i{xmm3/m128} from a mask specified in \i{xmm4}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.256.66.0F3A.W0 4B /r ib
    mnemonic: VBLENDVPD \i{ymm1}, \i{ymm2}, \i{ymm3/m256}, \i{ymm4}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: AVX
    description: >-
      Selects packed double-precision floating-point values from \i{ymm2} and \i{ymm3/m256} from a mask specified in \i{ymm4}.
      Stores the result in \i{ymm1}.
encoding:
  operands: 4
  encodings:
    LEGACY:
      - ModRM.reg[rw]
      - ModRM.r/w[r]
      - None (implicitly \c{XMM0})
      - ""
    VEX:
      - ModRM.reg[w]
      - VEX.vvvv[r]
      - ModRM.r/m[r]
      - imm8[7:4]
bitEncoding:
  list:
    - form: xmmreg3(2) into xmmreg3(1)
      bits:
        - \bits{66}
        - \bits{0F}
        - \bits{38}
        - \bits{15}
        - \bits{11 xmmreg3(1) xmmreg3(2)}
    - form: memory into xmmreg3
      bits:
        - \bits{66}
        - \bits{0F}
        - \bits{38}
        - \bits{15}
        - \bits{mod xmmreg3 r/m}
description: >-
  The \c{(V)BLENDVPD} instruction conditionally moves double-precision floating-point values from the second source operand into the first source operand.
  The result is stored in the destination operand.

  This instruction is similar to \instr{BLENDPD}, but differs in that the mask selection is stored in a register instead of the hardcoded immediate.

  This instruction, despite being named as if it operates on floating-point numbers, will work on 64 bit integers as well.

  The VEX encoded instruction forms have a different opcode than the legacy SSE form.
  All versions \i{except} the legacy SSE version zero the unused upper SIMD register bits.

  In 32 bit mode, \c{imm8[7]} is treated as a 0, preventing access to more than 8 vector registers.

  The VEX form of this instruction reserves \c{VEX.W = 1} (i.e. it must be set to \c{0}).
  Failure to do so will result in a \c{#UD} exception.
operation: |-
  pub fn blendvpd(dest: &mut Simd<f64>, src: Simd<f64>) {
    // If `XMM0[n]` is 0, `dest` will be copied into itself (i.e. nothing will happen)
    if XMM0[0] {
      dest[63..=0] = src[63..=0]
    }
    if XMM0[1] {
      dest[127..=64] = src[127..=64];
    }
    // dest[Simd::max()..=128] (unmodified)
  }

  fn vblendvpd_vex(dest: &mut Simd<f64>, src1: Simd<f64>, src2: Simd<f64>, src3: Simd<bool>, kl: u32) {
    for n in 0..kl {
      let vi = n * 64;
      let vi_next = vi + 63;

      if src3[n] {
        dest[vi_next..=vi] = src2[vi_next..=vi];
      } else {
        dest[vi_next..=vi] = src1[vi_next..=vi];
      }
    }

    let end = kl * 64;
    dest[Simd::max()..=end] = 0;
  }

  pub fn vblendvpd_vex128(dest: &mut Simd<f64>, src1: Simd<f64>, src2: Simd<f64>, src3: Simd<bool>) {
    vblendpd_vex(dest, src1, src2, src3, 2);
  }
  pub fn vblendvpd_vex256(dest: &mut Simd<f64>, src1: Simd<f64>, src2: Simd<f64>, src3: Simd<bool>) {
    vblendpd_vex(dest, src1, src2, src3, 4);
intrinsicsC: |-
  __m128 _mm_blendv_pd(__m128d a, __m128d b, __m128d mask)
  __m256 _mm256_blendv_pd(__m256d a, __m256d b, __m256d mask)
exceptions:
  floating: None
  other: See Exceptions Type 4.
  otherAdditional:
    "#UD": If \c{VEX.W} is \c{1}.
changes:
  version: 73
  date: 2020-11
  list:
    - The "Intrinsics" section featured a duplicate copy of the 128 bit version.
