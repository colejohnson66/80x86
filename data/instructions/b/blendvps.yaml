%YAML 1.2
---
title: Variable Blend Packed Single-Precision Floating-Point Values
opcode:
  - opcode: 66 0F 38 14 /r
    mnemonic: BLENDVPS \i{xmm1}, \i{xmm2/m128}, <XMM0>
    encoding: LEGACY
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: SSE4_1
    description: >-
      Selects packed single-precision floating-point values from \i{xmm1} and \i{xmm2/m128} from a mask specified in \reg{XMM0}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.128.66.0F3A.W0 4A /r ib
    mnemonic: VBLENDVPS \i{xmm1}, \i{xmm2}, \i{xmm3/m128}, \i{xmm4}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: AVX
    description: >-
      Selects packed single-precision floating-point values from \i{xmm2} and \i{xmm3/m128} from a mask specified in \i{xmm4}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.256.66.0F3A.W0 4A /r ib
    mnemonic: VBLENDVPS \i{ymm1}, \i{ymm2}, \i{ymm3/m256}, \i{ymm4}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: AVX
    description: >-
      Selects packed single-precision floating-point values from \i{ymm2} and \i{ymm3/m256} from a mask specified in \i{ymm4}.
      Stores the result in \i{ymm1}.
encoding:
  operands: 4
  encodings:
    LEGACY:
      - ModRM.reg[rw]
      - ModRM.r/w[r]
      - None (implicitly \c{XMM0})
      - ""
    VEX:
      - ModRM.reg[w]
      - VEX.vvvv[r]
      - ModRM.r/m[r]
      - imm8[7:4]
bitEncoding:
  list:
    - form: xmmreg3(2) into xmmreg3(1)
      bits:
        - \bits{66}
        - \bits{0F}
        - \bits{38}
        - \bits{14}
        - \bits{11 xmmreg3(1) xmmreg3(2)}
    - form: memory into xmmreg3
      bits:
        - \bits{66}
        - \bits{0F}
        - \bits{38}
        - \bits{14}
        - \bits{mod xmmreg3 r/m}
description: >-
  The \c{(V)BLENDVPS} instruction conditionally moves single-precision floating-point values from the second source operand into the first source operand.
  The result is stored in the destination operand.

  This instruction is similar to \instr{BLENDPS}, but differs in that the mask selection is stored in a register instead of the hardcoded immediate.

  This instruction, despite being named as if it operates on floating-point numbers, will work on 64 bit integers as well.

  The VEX encoded instruction forms have a different opcode than the legacy SSE form.
  All versions \i{except} the legacy SSE version zero the unused upper SIMD register bits.

  In 32 bit mode, \c{imm8[7]} is treated as a 0, preventing access to more than 8 vector registers.

  The VEX form of this instruction reserves \c{VEX.W = 1} (i.e. it must be set to \c{0}).
  Failure to do so will result in a \c{#UD} exception.
operation: |-
  public void BLENDVPS(SimdF32 dest, SimdF32 src)
  {
    // If `XMM0.Bit[n]` is 0, `dest` will be copied into itself (i.e. nothing will happen)
    if (XMM0.Bit[0])
      dest[0] = src[0];
    if (XMM0.Bit[1])
      dest[1] = src[1];
    if (XMM0.Bit[2])
      dest[2] = src[2];
    if (XMM0.Bit[3])
      dest[3] = src[3];
    // dest[4..Simd.MAX] (unmodified)
  }

  void VBLENDVPS_Vex(SimdF32 dest, SimdF32 src1, SimdF32 src2, SimdF32 src3, int kl)
  {
    for (int n = 0; n < kl, n++) {
      if (src3.Bit[n])
        dest[n] = src2[n];
      else
        dest[n] = src1[n];
    }
    dest[kl..Simd.MAX] = 0;
  }
  public void VBLENDVPS_Vex128(SimdF32 dest, SimdF32 src1, SimdF32 src2, SimdF32 src3)
  {
    VBLENDVPS_Vex(dest, src1, src2, src3, 4);
  }
  public void VBLENDVPS_Vex256(SimdF32 dest, SimdF32 src1, SimdF32 src2, SimdF32 src3)
  {
    VBLENDVPS_Vex(dest, src1, src2, src3, 8);
  }
intrinsicsC: |-
  __m128 _mm_blendv_ps(__m128 a, __m128 b, __m128 mask)
  __m256 _mm256_blendv_ps(__m256 a, __m256 b, __m256 mask)
exceptions:
  floating: None
  other: See Exceptions Type 4.
  otherAdditional:
    "#UD": If \c{VEX.W} is \c{1}.
