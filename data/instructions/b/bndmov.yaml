%YAML 1.2
---
title: Move Bounds
opcode:
  - opcode: 66 0F 1A /r
    mnemonic: BNDMOV \i{bnd1}, \i{bnd2/m64}
    encoding: RM
    validity:
      16: valid
      32: valid
      64: n/e
    cpuid: MPX
    description: >-
      Moves a lower and upper bound from \i{bnd2/m64} into \i{bnd1}.
  - opcode: 66 0F 1A /r
    mnemonic: BNDMOV \i{bnd1}, \i{bnd2/m128}
    encoding: RM
    validity:
      16: n/e
      32: n/e
      64: valid
    cpuid: MPX
    description: >-
      Moves a lower and upper bound from \i{bnd2/m128} into \i{bnd1}.
  - opcode: 66 0F 1B /r
    mnemonic: BNDMOV \i{bnd1/m64}, \i{bnd2}
    encoding: MR
    validity:
      16: valid
      32: valid
      64: n/e
    cpuid: MPX
    description: >-
      Moves a lower and upper bound from \i{bnd2} into \i{bnd1/m64}.
  - opcode: 66 0F 1B /r
    mnemonic: BNDMOV \i{bnd1/m128}, \i{bnd2}
    encoding: MR
    validity:
      16: n/e
      32: n/e
      64: valid
    cpuid: MPX
    description: >-
      Moves a lower and upper bound from \i{bnd2} into \i{bnd1/m128}.
encoding:
  operands: 2
  encodings:
    MR:
      - ModRM.reg[w]
      - ModRM.r/m[r]
    RM:
      - ModRM.r/m[w]
      - ModRM.reg[r]
bitEncoding:
  list:
    - form: reg3(1) into reg3(2)
      bits:
        - \bits{66}
        - \bits{0F}
        - \bits{1A}
        - \bits{11 reg3(2) reg3(1)}
    - form: memory into reg3
      bits:
        - \bits{66}
        - \bits{0F}
        - \bits{1A}
        - \bits{mod reg3 r/m}
    - form: reg3(2) into reg3(1)
      bits:
        - \bits{66}
        - \bits{0F}
        - \bits{1B}
        - \bits{11 reg3(2) reg3(1)}
    - form: reg3 into memory
      bits:
        - \bits{66}
        - \bits{0F}
        - \bits{1B}
        - \bits{mod reg3 r/m}
description: >-
  The \c{BNDMOV} instruction moves a pair of lower and upper bounds from the source operand into the destination operand.

  Which instruction form (32 or 64 bit) is used depends on the operating mode of the processor.
  In 16 and 32 bit mode, the 32 bit form is used (64 bits are moved), and, in 64 bit mode, the 64 bit form is used (128 bits are moved).
operation: |-
  public void BNDMOV(ref Bound dest, Bound src)
  {
    dest = src;
  }
intrinsics: |-
  void *_bnd_copy_ptr_bounds(const void *q, const void *r)
exceptions:
  protected:
    "#UD":
      - If the \instr{LOCK} prefix is used, but the destination is not a memory operand.
      - If \c{ModRM.r/m} does not encode \c{BND0} through \c{BND3} (i.e. contains a 4, 5, 6, or 7).
      - If the address size overload prefix (\c{67h}) is used when \c{CS.D} is \c{1}.
      - If the address size overload prefix is \i{not} used when \c{CS.D} is \c{0}.
    "#SS(0)": If the memory operand effective address is outside the \reg{SS} segment limit.
    "#GP(0)":
      - If the memory operand effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
      - If the destination operand points to a non-writable segment.
      - If the \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment register contains a \c{NULL} segment selector.
    "#AC(0)": If alignment checking is enabled and an unaligned memory access is made while \c{CPL} is 3.
    "#PF(fault-code)": If a page fault occurs.
  real:
    "#UD":
      - If the \instr{LOCK} prefix is used, but the destination is not a memory operand.
      - If \c{ModRM.r/m} does not encode \c{BND0} through \c{BND3} (i.e. contains a 4, 5, 6, or 7).
      - If 16 bit addressing is used.
    "#SS(0)": If the memory operand effective address is outside the \reg{SS} segment limit.
    "#GP(0)": If the memory operand effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
  virtual:
    "#UD":
      - If the \instr{LOCK} prefix is used, but the destination is not a memory operand.
      - If \c{ModRM.r/m} does not encode \c{BND0} through \c{BND3} (i.e. contains a 4, 5, 6, or 7).
      - If 16 bit addressing is used.
    "#SS(0)": If the memory operand effective address is outside the \reg{SS} segment limit.
    "#GP(0)": If the memory operand effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
    "#AC(0)": If alignment checking is enabled and an unaligned memory access is made while \c{CPL} is 3.
    "#PF(fault-code)": If a page fault occurs.
  compatibility: Same exceptions as protected mode.
  long:
    "#UD":
      - If the \instr{LOCK} prefix is used, but the destination is not a memory operand.
      - If \c{ModRM.r/m} does not encode \c{BND0} through \c{BND3} (i.e. contains any of 4 through 15).
      - If the address size overload prefix (\c{67h}) is used when \c{CS.D} is \c{1}.
      - If the address size overload prefix is \i{not} used when \c{CS.D} is \c{0}.
      - If RIP-relative addressing is used.
    "#SS(0)": If the memory address referencing the \reg{SS} segment is in non-canonical form.
    "#GP(0)": If the memory address is in non-canonical form.
    "#AC(0)": If alignment checking is enabled and an unaligned memory access is made while \c{CPL} is 3.
    "#PF(fault-code)": If a page fault occurs.
