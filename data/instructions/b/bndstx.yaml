%YAML 1.2
---
title: Store Extended Bounds Using Address Translation
opcode:
  - opcode: NP 0F 1B /r
    mnemonic: BNDSTX \i{mib}, \i{bnd}
    encoding: RM
    validity:
      16: valid
      32: valid
      64: valid
    cpuid: MPX
    description: >-
      Store the bounds stored in a bound table entry (BTE) from \i{bnd} into \i{mib}.
encoding:
  operands: 2
  encodings:
    RM:
      - SIB.base[r] + SIB.index[r]
      - ModRM.reg[w]
bitEncoding:
  list:
    - form: bound3 into memory
      bits:
        - \bits{0F}
        - \bits{1B}
        - \bits{mod bound3 r/m}
description: >-
  The \c{BNDSTX} instruction stores the bounds at the source operand to the address pointed to by the destination operand.
  This is conditional on the value contained in the register referenced in the SIB's index field matching the value stored in the bounds table entry.

  The destination operand \i{must} be a memory operand encoded using an SIB byte.
  The \c{base} field of the SIB byte contains the address of the bounds table, and the \c{index} field contains the buffer's offset.
  The \c{scale} field is ignored (treated as \c{0b00} (scale of 1)).
  If a displacement is provided, it is added to the \c{base} register's value.
  At no time is memory referenced by the SIB byte accessed (the memory contained at the address referenced by the \c{base} \i{is}, however), and the flags are untouched.

  Which instruction form (32 or 64 bit) is used depends on the operating mode of the processor.
  In 16 and 32 bit mode, the 32 bit form is used, and, in 64 bit mode, the 64 bit form is used.
  If a memory address is used as the second source operand, this distinction is irrelevant.
operation: |-
  public void BNDSTX_1632(Sib addr, Bound src)
  {
    IntPtr base = addr.base + addr.displacement;
    uint ptr = GPR(addr.index);

    uint a_bde = (base[12..32] << 2) + (BNDCFG[12..32] << 12);
    uint a_bt = mem[a_bde];
    if (a_bt.Bit[0] == 0)
    {
      BNDSTATUS = a_bde | 0x02;
      #BR;
    }

    uint a_bte = (base[2..12] << 4) + (a_bt[2..32] << 2);
    mem[a_bte] = bound.lower;
    mem[a_bte + 4] = bound.upper;
    mem[a_bte + 8] = ptr;
  }

  public void BNDSTX_64(Bound dest, Sib addr)
  {
    IntPtr base = addr.base + addr.displacement;
    uint ptr = GPR(addr.index);

    uint a_bde = (base[20..(48+MAWA)] << 3) + (BNDCFG[12..64] << 12); // see note 1
    uint a_bt = mem[a_bde];
    if (a_bt.Bit[0] == 0)
    {
      BNDSTATUS = a_bde | 0x02;
      #BR;
    }

    ulong a_bte = (base[3..20] << 5) + (a_bt[3..64] << 3);
    mem[a_bte] = bound.lower;
    mem[a_bte + 8] = bound.upper;
    mem[a_bte + 16] = ptr;
  }
operationNotes:
  - >-
    If \c{CPL} (protection ring) is less than 3, the supervisor \c{MAWA} (\c{MAWAS}) is used, which is 0.
    Otherwise, the user \c{MAWA} (\c{MAWAU}) is used; it's value is enumerated in \cpuid{eax,07,ecx,00,,ecx,mawau,21..17}.
exceptions:
  protected:
    "#BR": If the bound directory entry is invalid.
    "#UD":
      - If the \instr{LOCK} prefix is used.
      - If \c{ModRM.r/m} does not encode \c{BND0} through \c{BND3} (i.e. contains a 4, 5, 6, or 7).
      - If the address size overload prefix (\c{67h}) is used when \c{CS.D} is \c{1}.
      - If the address size overload prefix is \i{not} used when \c{CS.D} is \c{0}.
    "#GP(0)":
      - If the destination's effective address of the Bound Table entry is outside the \reg{DS} segment limit.
      - If the \reg{DS} segment contains a \c{NULL} segment selector.
    "#PF(fault-code)": If a page fault occurs.
  real:
    "#BR": If the bound directory entry is invalid.
    "#UD":
      - If the \instr{LOCK} prefix is used.
      - If \c{ModRM.r/m} does not encode \c{BND0} through \c{BND3} (i.e. contains a 4, 5, 6, or 7).
      - If 16 bit addressing is used.
    "#GP(0)":
      - If the destination's effective address of the Bound Table entry is outside the \reg{DS} segment limit.
      - If the \reg{DS} segment contains a \c{NULL} segment selector.
  virtual:
    "#BR": If the bound directory entry is invalid.
    "#UD":
      - If the \instr{LOCK} prefix is used.
      - If \c{ModRM.r/m} does not encode \c{BND0} through \c{BND3} (i.e. contains a 4, 5, 6, or 7).
      - If 16 bit addressing is used.
    "#GP(0)":
      - If the destination's effective address of the Bound Table entry is outside the \reg{DS} segment limit.
      - If the \reg{DS} segment contains a \c{NULL} segment selector.
    "#PF(fault-code)": If a page fault occurs.
  compatibility: Same exceptions as protected mode.
  long:
    "#BR": If the bound directory entry is invalid.
    "#UD":
      - If the \instr{LOCK} prefix is used.
      - If \c{ModRM.r/m} does not encode \c{BND0} through \c{BND3} (i.e. contains any of 4 through 15).
      - If the address size overload prefix (\c{67h}) is used when \c{CS.D} is \c{1}.
      - If the address size overload prefix is \i{not} used when \c{CS.D} is \c{0}.
    "#GP(0)": If the memory address (\c{A_BDE} or \c{A_BTE}) is in non-canonical form.
    "#PF(fault-code)": If a page fault occurs.
changes:
  version: 73
  date: 2020-11
  list:
    - >-
      The overview table only mentions 32 and 64 bit mode support.
      However, this instruction is supported in all modes.
