%YAML 1.2
---
title: Byte Swap
validity: 1632,64
opcode:
  - opcode: 0F C8+rd
    mnemonic: BSWAP \i{r32}
    encoding: O
    validity:
      1632: valid*
      64: valid
    description: Reverses the byte order (endianness) of \i{r32}.
  - opcode: REX.W 0F C8+rd
    mnemonic: BSWAP \i{r64}
    encoding: O
    validity:
      1632: n/e
      64: valid
    description: Reverses the byte order (endianness) of \i{r64}.
opcodeNote: >-
  The \c{BSWAP} instruction is not supported on processors earlier than the 80486.
encoding:
  operands: 1
  encodings:
    O:
      - opcode[rw]
bitEncoding:
  list:
    - form: reg3
      bits:
        - \bits{0F}
        - \bits{1100 1 reg3}
description: >-
  The \c{BSWAP} instruction reverses the byte order of the operand.
  This instruction can be used to change the endianness of the operand from little to big (or visa versa).

  This instruction is only valid on 32 and 64 bit operands.
  To operate on a 16 bit operand, use the \instr{XCHG} instruction.
  Use of this instruction on a 16 bit operand is undefined.
operation: |-
  pub fn bswap_op32(arg: &mut u32) {
    let temp = *arg;
    arg[7..=0] = temp[31..=24];
    arg[15..=8] = temp[23..=16];
    arg[23..=16] = temp[15..=8];
    arg[31..=24] = temp[7..=0];
  }

  pub fn bswap_op64(arg: &mut u64) {
    let temp = *arg;
    arg[7..=0] = temp[63..=56];
    arg[15..=8] = temp[55..=48];
    arg[23..=16] = temp[47..=40];
    arg[31..=24] = temp[39..=32];
    arg[39..=32] = temp[31..=24];
    arg[47..=40] = temp[23..=16];
    arg[55..=48] = temp[15..=8];
    arg[63..=56] = temp[7..=0];
  }
flags: None
exceptions:
  protected:
    "#UD": If the \instr{LOCK} prefix is used.
  real: Same as protected mode.
  virtual: Same as protected mode.
  compatibility: Same as protected mode.
  long: Same as protected mode.
