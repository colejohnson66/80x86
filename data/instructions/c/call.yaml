%YAML 1.2
---
title: Call Procedure
opcode:
  - opcode: E8 \i{cw}
    mnemonic: CALL \i{rel16}
    encoding: D
    validity:
      16: valid
      32: valid
      64: n/s
    description: >-
      Call a near procedure with a relative offset stored in \i{rel16}.
  - opcode: E8 \i{cd}
    mnemonic: CALL \i{rel32}
    encoding: D
    validity:
      16: valid
      32: valid
      64: valid
    description: >-
      Call a near procedure with a relative offset stored in \i{rel32}.
  - opcode: FF /2
    mnemonic: CALL \i{r/m16}
    encoding: M
    validity:
      16: valid
      32: valid
      64: n/e
    description: >-
      Call a near procedure with an absolute address stored in \i{r/m16}.
  - opcode: FF /2
    mnemonic: CALL \i{r/m32}
    encoding: M
    validity:
      16: valid
      32: valid
      64: n/e
    description: >-
      Call a near procedure with an absolute address stored in \i{r/m32}.
  - opcode: FF /2
    mnemonic: CALL \i{r/m64}
    encoding: M
    validity:
      16: n/e
      32: n/e
      64: valid
    description: >-
      Call a near procedure with an absolute address stored in \i{r/m64}.
  - opcode: 9A /i{cww}
    mnemonic: CALL \i{ptr16:16}
    encoding: D
    validity:
      16: valid
      32: valid
      64: invalid
    description: >-
      Call a far procedure with an absolute address stored in \i{ptr16:16}.
  - opcode: 9A /i{cwd}
    mnemonic: CALL \i{ptr16:32}
    encoding: D
    validity:
      16: valid
      32: valid
      64: invalid
    description: >-
      Call a far procedure with an absolute address stored in \i{ptr16:32}.
  - opcode: FF /3
    mnemonic: CALL \i{m16:16}
    encoding: M
    validity:
      16: valid
      32: valid
      64: valid
    description: >-
      Call a far procedure with an absolute indirect address stored in \i{m16:16}.

      In 32 bit mode, if the selector points to a gate, then \c{RIP} is set to the zero extended 32 bit displacement taken from the gate.
      If not, then \c{RIP} is set to the zero extended 16 bit offset from the far pointer in the instruction.
  - opcode: FF /3
    mnemonic: CALL \i{m16:32}
    encoding: M
    validity:
      16: valid
      32: valid
      64: valid
    description: >-
      Call a far procedure with an absolute indirect address stored in \i{m16:32}.

      In 64 bit mode, if the selector points to a gate, then \c{RIP} is set to the 64 bit displacement taken from the gate.
      If not, then \c{RIP} is set to the zero extended 32 bit offset from the far pointer in the instruction.
  - opcode: REX.W FF /3
    mnemonic: CALL \i{m16:64}
    encoding: M
    validity:
      16: n/e
      32: n/e
      64: valid
    description: >-
      Call a far procedure with an absolute indirect address stored in \i{m16:64}.

      If the selector points to a gate, then \c{RIP} is set to the 64 bit displacement taken from the gate.
      If not, then \c{RIP} is set to the 64 bit offset from the far pointer in the instruction.
opcodeNote: >-
encoding:
  operands: 1
  encodings:
    D:
      - Offset[r]
    M:
      - ModRM.r/m[r]
# bitEncoding:
#   list:
#     - form:
#       limits:
#       bits:
description: >-
  The \c{CALL} instruction saves a return address on the stack before jumping to the called procedure whose address is specified in the operand.
operation: |-
flags:
  # Common values:
  # Set according to the result.
  # Set.
  # Cleared.
  # Undefined.
  # Unmodified.
  # Set if ... Cleared otherwise.
  CF: Affected only if a task switch occurs.
  PF: Affected only if a task switch occurs.
  AF: Affected only if a task switch occurs.
  ZF: Affected only if a task switch occurs.
  SF: Affected only if a task switch occurs.
  OF: Affected only if a task switch occurs.
exceptions:
  protected:
  real:
  virtual:
  compatibility:
  long:
  floating:
  other:
  otherAdditional:
changes:
  version: 73
  date: 2020-11
  list:
    -
refs:
  - name:
    value: >-
