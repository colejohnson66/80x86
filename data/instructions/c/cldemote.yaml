%YAML 1.2
---
title: Cache Line Demote
opcode:
  - opcode: NP 0F 1C /0
    mnemonic: CLDEMOTE \i{m8}
    encoding: M
    validity:
      16: valid
      32: valid
      64: valid
    cpuid: CLDEMOTE
    description: >-
      Hint to the processor to move the cache line containing \i{m8} to a more distant cache without writing back to memory.
encoding:
  operands: 1
  encodings:
    M:
      - ModRM.r/m[w]
bitEncoding:
  list:
    - form: demote a cache line
      bits:
        - \bits{0F}
        - \bits{1C}
        - \bits{mod 000 r/m}
description: >-
  The \c{CLDEMOTE} instruction hints to the processor that the cache line containing the operand's effective address should be moved ("demoted") to a cache further away from the core.

  Software using this instruction should ensure that the referenced memory is \i{not} accessed afterwards to avoid cache data move penalties.

  This instruction has no guarantees and may be ignored by the processor.
  For example, usage of this instruction with an effective memory address that is not in the cache will do nothing.

  In some architectures, this instruction may cause a transactional abort with the Transactional Synchronization Extensions (TSX).
  However, programmers must \i{not} rely on this behavior.
operation: |-
  pub fn cldemote(*mut libc::c_void ptr) {
    cache_line_demote(ptr);
  }
intrinsicsC: |-
  void _cldemote(const void* ptr)
exceptions:
  protected:
    "#UD": If the \instr{LOCK} prefix is used.
  real:
    "#UD": If the \instr{LOCK} prefix is used.
  virtual:
    "#UD": If the \instr{LOCK} prefix is used.
  compatibility:
    "#UD": If the \instr{LOCK} prefix is used.
  long:
    "#UD": If the \instr{LOCK} prefix is used.
